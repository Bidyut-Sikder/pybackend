


# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "testing" ]
  pull_request:
    branches: [ "testing" ]

permissions:
  contents: read

jobs:
  build:
    environment:
      name: testing
    env: # These are from github secret.
      database_username : ${{secrets.DATABASE_USERNAME}} 
      database_password : ${{secrets.DATABASE_PASSWORD}}
      database_host : ${{secrets.DATABASE_HOST}}
      database_port : ${{secrets.DATABASE_PORT}}
      database_name : ${{secrets.DATABASE_NAME}}
      SECRET_KEY : ${{secrets.SECRET_KEY}}
      ALGORITHM : ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES : ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services: # This service will create a postgresql database server on github actions just like other docker container.
      postgres: # This is the name of the service
        image: postgres # This is the image to use
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432 # This is the port to use
        
        options: >-
          --health-cmd="pg_isready" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5



    runs-on: ubuntu-latest
    steps:
    - name: pulling git repo
      uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest 
## This part is for pushing the image to docker hub

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3


    # - name: Build and push
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: ./
    #     file: ./Dockerfile
    #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pybackend:latest
    #     push: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{secrets.RENDER_API_KEY}}
        name: ${{secrets.BIDYUT}}
      run: |
        curl -X POST \
        -H "Authorization: Bearer $RENDER_API_KEY" \
        -H "Content-Type: application/json" \
        https://api.render.com/v1/services/{SERVICE_ID}/deploys





